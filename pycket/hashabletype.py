#! /usr/bin/env python
# -*- coding: utf-8 -*-

from math                  import ceil, sqrt
from rpython.tool.pairtype import extendabletype

__all__ = ['HashableType']

INITIAL_CACHE_SIZE = 10000

class Counter(object):
    def __init__(self):
        self.value = 0

    def get_next(self):
        v = self.value
        self.value += 1
        return v

# A hashable type is an extendable type which includes a unique
# value associated with it. All classes generated by HashableType are assigned
# a unique prime number via the |_object_type_hash| method.
class HashableType(extendabletype):
    # Initial list of prime numbers
    primes  = [2, 3, 5, 7, 11]
    emitted = Counter()

    @staticmethod
    def add_next_prime():
        start = HashableType.primes[-1]
        found = False
        while not found:
            start += 2
            stop = int(ceil(sqrt(start))) + 1
            for prime in HashableType.primes:
                if prime > stop:
                    found = True
                    break
                elif start % prime == 0:
                    break

        HashableType.primes.append(start)

    @staticmethod
    def next_prime():
        if HashableType.emitted.value == len(HashableType.primes):
            HashableType.add_next_prime()
        return HashableType.primes[HashableType.emitted.get_next()]

    def __new__(cls, name, parents, dct):
        val = HashableType.next_prime()
        dct['_object_type_hash'] = lambda self: val
        return extendabletype.__new__(cls, name, parents, dct)

# Perform an initial population of the primes cache
for i in range(INITIAL_CACHE_SIZE):
    HashableType.add_next_prime()

