#! /usr/bin/env python
# -*- coding: utf-8 -*-

from math                  import ceil, sqrt
from rpython.tool.pairtype import extendabletype

__all__ = ['HashableType']

def is_prime(n):
    if n == 2:
        return True
    if n < 2 or n % 2 == 0:
        return False
    upper = int(ceil(sqrt(n)))
    for i in range(3, upper + 1, 2):
        if n % i == 0:
            return False
    return True

# A hashable type is an extendable type which includes a unique
# value associated with it. All classes generated by HashableType are assigned
# a unique prime number via the |_object_type_hash| method.
class HashableType(extendabletype):
    seed = [3]

    @staticmethod
    def next_prime():
        s = HashableType.seed[0]
        while True:
            s += 2
            if is_prime(s):
                HashableType.seed[0] = s
                return s

    def __new__(cls, name, parents, dct):
        val = HashableType.next_prime()
        dct['_object_type_hash'] = lambda self: val
        return extendabletype.__new__(cls, name, parents, dct)

